"use strict";(("undefined"!=typeof self?self:this).webpackChunk_polkadot_apps=("undefined"!=typeof self?self:this).webpackChunk_polkadot_apps||[]).push([[2589],{14534:(e,n,t)=>{t.d(n,{LW:()=>f,vK:()=>k,$y:()=>$,R0:()=>E});var a=t(33403),s=t(90107),r=t(94175);const o="npm:@polkagate/snap",i="0.2.1",c="polkagate-snap",u={[o]:{version:`>=${i}`}},l=async e=>{console.info("Args in invokeSnap:",e);const n=e?.snapId||o,t={method:e.method,params:e?.params||[]};return await window.ethereum.request({method:"wallet_invokeSnap",params:{snapId:n,request:t}})},d=async()=>[{address:await l({method:"getAddress"}),name:"Metamask account 1 🍻",type:"sr25519"}],m={accounts:{get:d,subscribe:(()=>{let e=[];return{subscribe:n=>(e.push(n),()=>{e=e.filter((e=>e!==n)),d().then(n).catch(console.error)}),notifySubscribers:n=>{e.forEach((e=>e(n)))}}})().subscribe},metadata:new class{get(){return(async()=>await l({method:"getMetadataList",params:{}}))()}provide(e){return(async e=>await l({method:"setMetadata",params:{metaData:e}}))(e)}},name:c,signer:{signPayload:async e=>await l({method:"signJSON",params:{payload:e}}),signRaw:async e=>await l({method:"signRaw",params:{raw:e}})},version:i},h=async e=>{console.info(`${c} is connecting to ${e} ...`);const n=await(async()=>await window.ethereum.request({method:"wallet_requestSnaps",params:u}))();return{...m,version:n?.[o]?.version}},p={connect:h,enable:h,version:i},w=window.ethereum?.isMetaMask,b=window;b.injectedWeb3=b.injectedWeb3||{};let f=y(),g=null;function y(){return 0!==Object.values(b.injectedWeb3).filter((({connect:e,enable:n})=>!(!e&&!n))).length}function v(e){throw new Error(`${e}: web3Enable(originName) needs to be called before ${e}`)}function $(e,n=[]){if(!e)throw new Error("You must pass a name for your app to the web3Enable function");const t=n.length?Promise.all(n.map((e=>e().catch((()=>!1))))):Promise.resolve([!0]);var s;return s=()=>t.then((()=>function(e){return w&&(b.injectedWeb3[c]=p),Promise.all(Object.entries(b.injectedWeb3).map((([n,{connect:t,enable:s,version:r}])=>Promise.resolve().then((()=>t?t(e):s?s(e).then((e=>(0,a.Z)({name:n,version:r||"unknown"},e))):Promise.reject(new Error("No connect(..) or enable(...) hook found")))).catch((({message:e})=>{console.error(`Error initializing ${n}: ${e}`)}))))).then((e=>e.filter((e=>!!e))))}(e).then((e=>e.map((e=>(e.accounts.subscribe||(e.accounts.subscribe=n=>(e.accounts.get().then(n).catch(console.error),()=>{})),e))))).catch((()=>[])).then((e=>{const n=e.map((({name:e,version:n})=>`${e}/${n}`));return f=y(),console.info(`web3Enable: Enabled ${e.length} extension${1!==e.length?"s":""}: ${n.join(", ")}`),e})))),g=new Promise((e=>{"complete"===document.readyState?e(s()):window.addEventListener("load",(()=>e(s())))})),g}async function k({accountType:e,extensions:n,genesisHash:t,ss58Format:a}={}){const o=[],i=await async function(e,n){return g?(await g).filter((({name:e})=>!n||n.includes(e))):v(e)}("web3Accounts",n),c=await Promise.all(i.map((async({accounts:n,name:o})=>{try{return function(e,n,t){return n.map((({address:n,genesisHash:a,name:o,type:i})=>({address:42===n.length?n:(0,s.m)((0,r.m)(n),t),meta:{genesisHash:a,name:o,source:e},type:i})))}(o,function(e,n,t){return e.filter((e=>(!e.type||!t||t.includes(e.type))&&(!e.genesisHash||!n||e.genesisHash===n)))}(await n.get(),t,e),a)}catch{return[]}})));return c.forEach((e=>{o.push(...e)})),console.info(`web3Accounts: Found ${o.length} address${1!==o.length?"es":""}`),o}async function E(e){if(!g)return v("web3FromSource");const n=await g,t=e&&n.find((({name:n})=>n===e));if(!t)throw new Error(`web3FromSource: Unable to find an injected ${e}`);return t}}}]);